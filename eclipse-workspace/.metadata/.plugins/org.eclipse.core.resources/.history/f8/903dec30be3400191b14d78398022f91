package breadthFirstSearch;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.TreeSet;

/*
** 分红酒 **

有4个红酒瓶子，它们的容量分别是：9升, 7升, 4升, 2升
开始的状态是 [9,0,0,0]，也就是说：第一个瓶子满着，其它的都空着。
允许把酒从一个瓶子倒入另一个瓶子，但只能把一个瓶子倒满或把一个瓶子倒空，不能有中间状态。这样的一次倒酒动作称为1次操作。
假设瓶子的容量和初始状态不变，对于给定的目标状态，至少需要多少次操作才能实现？
本题就是要求你编程实现最小操作次数的计算。
输入
最终状态（逗号分隔）
输出
最小操作次数（如无法实现，则输出-1）
样例输入1：
9,0,0,0
样例输出1：
0
样例输入2：
6,0,0,3
样例输出2：
-1
样例输入3：
7,2,0,0
样例输出3：
2
*/
public class ShareWine {
	
	static class Node implements Comparable<Node>{
		int[] state;
		int step;
		
		public Node(int[] state, int step) {
			this.state = state;
			this.step = step;
		}

		@Override
		public int compareTo(Node o) {
			for (int i = 0; i < o.state.length; i++) {
				if (o.state[i] > this.state[i]) {
					return o.state[i] - this.state[i];
				} else if (o.state[i] < this.state[i]) {
					return this.state[i] - o.state[i];
				}
			}
			return 0;
		}
		
	}
	
	static TreeSet<Integer> book = new TreeSet<>();
	static int[] limit = {9, 7, 4, 2};
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		
		String input = scanner.nextLine();
		
		scanner.close();
		
		char[] tempChar = input.toCharArray();
		int[] destinationState = new int[4];
		for (int i = 0, j = 0; i < tempChar.length && j < 4; i++) {
			if (tempChar[i] != ',') {
				destinationState[j] = tempChar[i] - '0';
				j++;
			}
		}
		
		int sum = 0;
		for (int i = 0; i < 4; i++) {
			sum += destinationState[i];
		}
		
		Queue<Node> queue = new LinkedList<Node>();
		queue.add(new Node(new int[]{9, 0, 0, 0}, 0));
		book.add(9000);
		
		while (!queue.isEmpty()) {
			Node currentNode = queue.remove();
			
			if (changeToInt(currentNode.state) == changeToInt(destinationState)) {
				System.out.println(currentNode.step); 
				return;
			}
			
			int[] nextState = new int[4];
			
			for (int rootCup = 0; rootCup < 4; rootCup++) {
				for (int currentCup = 0; currentCup < 4; currentCup++) {
					if (currentCup == rootCup) {
						continue;
					}
					nextState = copyIntArr(currentNode.state, nextState);
					if (nextState[rootCup] - (limit[currentCup] - nextState[currentCup]) < 0) {
						nextState[currentCup] += nextState[rootCup];
						nextState[rootCup] = 0;
					} else {
						nextState[rootCup] -= (limit[currentCup] - nextState[currentCup]);
						nextState[currentCup] += (limit[currentCup] - nextState[currentCup]);
					}
					int nextStateInt = changeToInt(nextState);
					if (0 <= nextState[0] && nextState[0] <= 9
							&& 0 <= nextState[1] && nextState[1] <= 7
							&& 0 <= nextState[2] && nextState[2] <= 4
							&& 0 <= nextState[3] && nextState[3] <= 2
							&& book.add(nextStateInt)) {
						int[] trueNextState = new int[4];
						trueNextState = copyIntArr(nextState, trueNextState);
						queue.add(new Node(trueNextState, currentNode.step + 1));
					}
				}
			}
		}
		System.out.println(-1);
	}
	
	public static int[] copyIntArr(int[] sourceArr, int[] targetArr) {
		for (int i = 0; i < 4; i++) {
			targetArr[i] = sourceArr[i];
		}
		return targetArr;
	}
	
	public static int changeToInt(int[] array) {
		int unit = 1000;
		int number = 0;
		for (int i = 0; i < array.length; i++) {
			number += array[i] * unit;
			unit /= 10;
		}
		return number;
	}
}
